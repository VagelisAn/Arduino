#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include <String.h>

# define NUM_LEDS 50

const char* ssid     = "TYOUR SSID";
const char* password = "YOUR PASSWORD";

int red = D6;
int green = D7;
int blue = D5;

char input[30];
char aa[32]; // make this at least big enough for the whole string
String myData,xval,yval;
int a;

WiFiUDP UDPTestServer;
unsigned int UDPPort = 2807;

const int packetSize = 100;
byte packetBuffer[packetSize];

void setup() {
  Serial.begin(115200);
  delay(10);

  pinMode(red, OUTPUT);
  pinMode(green, OUTPUT);
  pinMode(blue, OUTPUT);
  digitalWrite(red, LOW);
  digitalWrite(green, LOW);
  digitalWrite(blue, LOW);

  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);
  WiFi.config(IPAddress(χχχ, χχχ, χχχ, χχχ), IPAddress(χχχ, χχχχ,χχχ, χχχχ), IPAddress(255, 255, 255, 0));

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  UDPTestServer.begin(UDPPort);

}

int value = 0;

void loop() {
  handleUDPServer();
  delay(1);
}

String getValue(String data, char separator, int index)
{
  int found = 0;
  int strIndex[] = { 0, -1 };
  int maxIndex = data.length() - 1;

  for (int i = 0; i <= maxIndex && found <= index; i++) {
    if (data.charAt(i) == separator || i == maxIndex) {
      found++;
      strIndex[0] = strIndex[1] + 1;
      strIndex[1] = (i == maxIndex) ? i + 1 : i;
    }
  }
  return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
}

void handleUDPServer() {
  int cb = UDPTestServer.parsePacket();
  if (cb) {
    UDPTestServer.read(packetBuffer, packetSize);
    
    for (int i = 0; i < packetSize; i++) {
      myData += (char)packetBuffer[i];
    }
    Serial.println(myData);
    myData.toCharArray(input, 30);

    xval = getValue(myData, ':', 0);
    yval = getValue(myData, ':', 1);
    yval.toCharArray(aa, sizeof(aa));
 
    if (xval == "R") {
      Serial.print("R " + yval);
      a = atoi(aa);
      if (a == 0) {
        digitalWrite(red, LOW);
      } else {
        analogWrite(red, a);
      }
    }
    if (xval == "G") {
      Serial.print("G " + yval);
      a = atoi(aa);
      if (a == 0) {
        digitalWrite(green, LOW);
      } else {
        analogWrite(green, a);
      }
    }
    if (xval == "B") {
      Serial.print("B " + yval);
      a = atoi(aa);
      if (a == 0) {
        digitalWrite(blue, LOW);
      } else {
        analogWrite(blue, a);
      }
    }

    if (myData.equals("ON")) {
    digitalWrite(red, HIGH);
    digitalWrite(green, HIGH);
    digitalWrite(blue, HIGH);
    }

    if (myData.equals("OFF")) {
    digitalWrite(red, LOW);
    digitalWrite(green, LOW);
    digitalWrite(blue, LOW);
    analogWrite(red, 0);
    analogWrite(green, 0);
    analogWrite(blue, 0);
    }

    if (myData.equals("Strobe")) {
      
    for(int j = 0; j < 10; j++) {

      analogWrite(red, 200);
      analogWrite(green, 200);
      analogWrite(blue, 200);
      delay(50);
      analogWrite(red, 0);
      analogWrite(green, 0);
      analogWrite(blue, 0);
      delay(100);

    }

    }
    if (myData.equals("Blinking Halloween")) {

    for(int j = 0; j < 10; j++) {

      analogWrite(red, 255);
      analogWrite(green, 0);
      analogWrite(blue, 0);
      delay(100);
      analogWrite(red, 0);
      analogWrite(green, 255);
      analogWrite(blue, 0);
      delay(100);
      analogWrite(red, 0);
      analogWrite(green, 0);
      analogWrite(blue, 255);
      delay(100);

    }

    }

    if (myData.equals("rainbowCycle")) {
    rainbowCycle(15);
    }
    if (myData.equals("Faded in")) {
      for (int j = 0; j < 3; j++ ) {

        // Fade IN
        for (int k = 0; k < 256; k++) {
          switch (j) {
            case 0: analogWrite(red, k);  analogWrite(green, 0); analogWrite(blue, 0); break;
            case 1: analogWrite(red, 0);  analogWrite(green, k); analogWrite(blue, 0); break;
            case 2: analogWrite(red, 0);  analogWrite(green, 0); analogWrite(blue, k); break;
          }

          delay(3);
        }
      }
    }
    if (myData.equals("Faded out")) {
      for (int j = 0; j < 3; j++ ) {
        // Fade OUT
        for (int k = 255; k >= 0; k--) {
          switch (j) {
            case 0: analogWrite(red, k);  analogWrite(green, 0); analogWrite(blue, 0); break;
            case 1: analogWrite(red, 0);  analogWrite(green, k); analogWrite(blue, 0); break;
            case 2: analogWrite(red, 0);  analogWrite(green, 0); analogWrite(blue, k); break;
          }

          delay(3);
        }
      }
    }
  }
  myData = "";
  memset(packetBuffer, 0, packetSize);
  memset(aa, 0, 30);
  memset(input, 0, 30);
  a = 0;
  yval = "";
  xval = "";
  
}


void rainbowCycle(int SpeedDelay) {

  byte *c;
  uint16_t i, j;
  for(j=0; j<256*5; j++) { // 5 cycles of all colors on wheel
    for(i=0; i< NUM_LEDS; i++) {
      c=Wheel(((i * 256 / NUM_LEDS) + j) & 255);
      analogWrite(red, *c);
      analogWrite(green, *(c+1));
      analogWrite(blue, *(c+2));
    }
    delay(SpeedDelay);
  }
}

byte * Wheel(byte WheelPos) {
  static byte c[3];
  if(WheelPos < 85) {
   c[0]=WheelPos * 3;
   c[1]=255 - WheelPos * 3;
   c[2]=0;
  } else if(WheelPos < 170) {
   WheelPos -= 85;
   c[0]=255 - WheelPos * 3;
   c[1]=0;
   c[2]=WheelPos * 3;
  } else {
   WheelPos -= 170;
   c[0]=0;
   c[1]=WheelPos * 3;
   c[2]=255 - WheelPos * 3;
  }

  return c;

}
